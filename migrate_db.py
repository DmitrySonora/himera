#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É history
"""

import sqlite3
import os
from datetime import datetime

# –ü—É—Ç—å –∫ –ë–î (—Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ)
DB_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'history.db')

def migrate_database():
    """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–î"""
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    if not os.path.exists(DB_PATH):
        print(f"‚ùå –§–∞–π–ª –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω: {DB_PATH}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = DB_PATH + f".backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    import shutil
    shutil.copy2(DB_PATH, backup_path)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã history
        c.execute("PRAGMA table_info(history)")
        columns = [row[1] for row in c.fetchall()]
        print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ history: {columns}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ history
        if 'emotion_primary' not in columns:
            c.execute('ALTER TABLE history ADD COLUMN emotion_primary TEXT')
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ emotion_primary")
        
        if 'emotion_confidence' not in columns:
            c.execute('ALTER TABLE history ADD COLUMN emotion_confidence REAL')
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ emotion_confidence")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        
        # –¢–∞–±–ª–∏—Ü–∞ –≤–µ—Ä—Å–∏–π —Å—Ö–µ–º—ã –ë–î
        c.execute('''
            CREATE TABLE IF NOT EXISTS schema_version (
                version INTEGER PRIMARY KEY
            )
        ''')
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ schema_version")
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                password_used TEXT,
                is_authorized BOOLEAN DEFAULT FALSE,
                authorized_until DATETIME,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                last_auth DATETIME,
                warned_expiry BOOLEAN DEFAULT FALSE,
                failed_attempts INTEGER DEFAULT 0,
                blocked_until DATETIME
            )
        ''')
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ users")
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–∏–º–∏—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        c.execute('''
            CREATE TABLE IF NOT EXISTS message_limits (
                user_id INTEGER,
                date TEXT,
                count INTEGER DEFAULT 0,
                PRIMARY KEY (user_id, date),
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )
        ''')
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ message_limits")
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–∞—Ä–æ–ª–µ–π
        c.execute('''
            CREATE TABLE IF NOT EXISTS passwords (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                password_text TEXT UNIQUE,
                description TEXT,
                is_active BOOLEAN DEFAULT TRUE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                duration_days INTEGER,
                times_used INTEGER DEFAULT 0
            )
        ''')
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ passwords")
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        c.execute('''
            CREATE TABLE IF NOT EXISTS auth_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                action TEXT,
                password_masked TEXT,
                details TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )
        ''')
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ auth_log")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        indexes = [
            ('idx_users_authorized_until', 'users', 'authorized_until'),
            ('idx_users_blocked_until', 'users', 'blocked_until'),
            ('idx_message_limits_date', 'message_limits', 'date'),
            ('idx_passwords_active', 'passwords', 'is_active'),
            ('idx_auth_log_timestamp', 'auth_log', 'timestamp')
        ]
        
        for index_name, table_name, column_name in indexes:
            try:
                c.execute(f'CREATE INDEX IF NOT EXISTS {index_name} ON {table_name}({column_name})')
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å {index_name}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å {index_name}: {e}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é —Å—Ö–µ–º—ã
        c.execute('INSERT OR REPLACE INTO schema_version (version) VALUES (?)', (1,))
        print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã: 1")
        
        conn.commit()
        print("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        c.execute("PRAGMA table_info(history)")
        new_columns = [row[1] for row in c.fetchall()]
        print(f"üìã –ù–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ history: {new_columns}")
        
        c.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in c.fetchall()]
        print(f"üìã –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î: {tables}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        conn.rollback()
        return False
        
    finally:
        conn.close()

def add_test_password():
    """–î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        import sys
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        
        from history_db import add_password
        
        success = add_password("test123", "–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–∞ 3 –¥–Ω—è", 3)
        if success:
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: test123 (3 –¥–Ω—è)")
        else:
            print("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: {e}")

def main():
    print("üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• –•–ò–ú–ï–†–´")
    print("=" * 50)
    
    if migrate_database():
        print("\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 50)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        print("\nüîë –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å...")
        add_test_password()
        
        print("\nüìñ –ß—Ç–æ –¥–∞–ª—å—à–µ:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python3 telegram_bot.py")
        print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –ø–∞—Ä–æ–ª–µ–º: test123")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /admin_stats –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
    else:
        print("\n‚ùå –ú–ò–ì–†–ê–¶–ò–Ø –ü–†–ï–†–í–ê–ù–ê!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏")

if __name__ == "__main__":
    main()