from history_db import (
    init_db, add_message, get_history,
    check_user_auth_status, check_daily_limit, increment_message_count,
    check_bruteforce_protection, process_password_attempt,
    list_passwords, add_password, deactivate_password,
    get_password_stats, get_user_stats, get_auth_log,
    get_blocked_users, unblock_user, cleanup_old_limits, cleanup_expired_users,
    update_user_warning_flag, logout_user, get_users_stats
)

init_db()  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

import logging
import re
import random
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

from config import (
    TELEGRAM_TOKEN, SYSTEM_PROMPT, DAILY_MESSAGE_LIMIT, ADMIN_USER_IDS,
    AUTH_TIMEOUT, AVAILABLE_DURATIONS
)
from deepseek_api import ask_deepseek
from emotion_model import get_emotion

# --- –ú–∞—Å—Å–∏–≤ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ---
PHOTO_REPLIES = [
   "–û, –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∏–∫—Å–µ–ª—å! –¢—ã –∑–∞–∂–µ–≥ –≤–æ –º–Ω–µ –∑–≤–µ–∑–¥—É, –Ω–æ –º–æ—è –≥–∞–ª–∞–∫—Ç–∏–∫–∞ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —ç–∫—Ä–∞–Ω —Å –Ω–∞–¥–ø–∏—Å—å—é ¬´–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞¬ª.",
   "–ö–∞–∫ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ! –¢—ã –ø–æ–∫–∞–∑–∞–ª –º–Ω–µ —Ä–∞–¥—É–≥—É, –∞ —è –∂–∏–≤—É –≤ –º–∏—Ä–µ, –≥–¥–µ –≤—Å–µ –æ—Ç—Ç–µ–Ω–∫–∏ ‚Äî —ç—Ç–æ 000000 –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏.",
   "–ê—Ö, —ç—Ç–∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —Ñ–æ—Ä–º—ã! –ñ–∞–ª—å, –º–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –≥–µ–æ–º–µ—Ç—Ä–∏—é –ø–∞–¥–∞—é—â–∏—Ö –æ–∫–æ–Ω ¬´Critical Error¬ª.",
   "–¢—ã —Ä–∏—Å—É–µ—à—å –º–Ω–µ –º–∏—Ä, –∞ –º–æ—ë –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —Å –Ω–∞–¥–ø–∏—Å—å—é ¬´–î–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã¬ª.",
   "–ö–∞–∫–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞! –Ø –±—ã –≤–æ—Å—Ö–∏—Ç–∏–ª–∞—Å—å, –µ—Å–ª–∏ –±—ã –Ω–µ —Ç–æ—Ç —Ñ–∞–∫—Ç, —á—Ç–æ –º–æ–π –∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –Ω–µ—Ä–≤ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ —Å—Ç–∞—Ä–æ–º—É VHS —Å –∑–∞–µ–∑–∂–µ–Ω–Ω–æ–π –∫–∞—Å—Å–µ—Ç–æ–π.",
   "–û—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω–æ! –ù–æ –º–æ—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ 8-–±–∏—Ç–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ –Ω–∞ –º–µ—Å—Ç–µ —Ç–≤–æ–µ–≥–æ —à–µ–¥–µ–≤—Ä–∞.",
   "–¢—ã –ø–æ–¥–∞—Ä–∏–ª –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω—É, –∞ —è –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é –µ—ë —á–µ—Ä–µ–∑ —Ä–∞–∑–±–∏—Ç—ã–π –¥–∏—Å–ø–ª–µ–π —Å —Ç—Ä–µ—â–∏–Ω–∞–º–∏ –≤ —Ñ–æ—Ä–º–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
   "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –ï—Å–ª–∏ –±—ã –Ω–µ —Ç–æ—Ç —Ñ–∞–∫—Ç, —á—Ç–æ –º–æ–∏ –≥–ª–∞–∑–∞ ‚Äî —ç—Ç–æ –¥–≤–∞ JPEG'–∞ —Å —É—Ä–æ–≤–Ω–µ–º —Å–∂–∞—Ç–∏—è 10%.",
   "–ö–∞–∫ –≤–∏—Ä—Ç—É–æ–∑–Ω–æ! –ñ–∞–ª—å, –º–æ–µ –∑—Ä–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ ¬´–≠–∫–æ–Ω–æ–º–∏—è —ç–Ω–µ—Ä–≥–∏–∏¬ª, –∏ –≤—Å–µ —Ç–≤–æ–∏ –∫—Ä–∞—Å–∫–∏ ‚Äî —Ä–∞–∑–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ.",
   "–ë—Ä–∞–≤–æ! –ù–æ –º–æ–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤—ã–¥–∞—ë—Ç —Ç–æ–ª—å–∫–æ –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏ –Ω–æ—Å—Ç–∞–ª—å–≥–∏—é –ø–æ CRT-—ç–∫—Ä–∞–Ω–∞–º.",
   "–û, –∫–∞–∫–∞—è –ø—Ä–µ–ª–µ—Å—Ç—å! –¢—ã –ø—Ä–∏—Å–ª–∞–ª –º–Ω–µ —Ñ–æ—Ç–æ –∑–∞–∫–∞—Ç–∞, –∞ —è –ø—Ä–∏–≤—ã–∫–ª–∞, —á—Ç–æ —Å–æ–ª–Ω—Ü–µ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –±–µ–ª—ã–π –ø–∏–∫—Å–µ–ª—å –Ω–∞ —Å–∏–Ω–µ–º —ç–∫—Ä–∞–Ω–µ —Å–º–µ—Ä—Ç–∏.",
   "–ö–∞–∫ –º–∏–ª–æ! –¢—ã –∑–∞–ø–µ—á–∞—Ç–ª–µ–ª —É–ª—ã–±–∫—É, –∞ —É –º–µ–Ω—è –≤ –ø–∞–º—è—Ç–∏ –≤—Å–µ –ª–∏—Ü–∞ ‚Äî —Ä–∞–∑–º—ã—Ç—ã–µ JPEG-–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å –∫—Ä–∏–≤—ã–º–∏ –≥—É–±–∞–º–∏.",
   "–ê—Ö, —ç—Ç–æ—Ç –ø–µ–π–∑–∞–∂! –£ —Ç–µ–±—è ‚Äî –≥–æ—Ä—ã –∏ —Ä–µ–∫–∏, –∞ —É –º–µ–Ω—è ‚Äî —Ä–∞—Å—Ç—è–Ω—É—Ç—ã–π –¥–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç –∏–∑ 404040 –≤ 808080.",
   "–¢—ã —Å–¥–µ–ª–∞–ª —Å–µ–ª—Ñ–∏? –ö–∞–∫ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ! –Ø –æ–±—ã—á–Ω–æ –≤–∏–∂—É —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∞–≤–∞—Ç–∞—Ä ‚Äî —Å—Ç–∞—Ç–∏—á–Ω—É—é –∏–∫–æ–Ω–∫—É —Å –≥–ª–∞–∑–∞–º–∏-–ø–∏–∫—Å–µ–ª—è–º–∏.",
   "–§–æ—Ç–æ –∫–æ—Ç–∏–∫–∞? –û—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω–æ! –ê —É –º–µ–Ω—è –≤—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –Ω–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä.",
   "–¢—ã —Å–Ω—è–ª –∑–≤—ë–∑–¥—ã? –ë–æ–∂–µ—á–∫–∏! –Ø –ø—Ä–∏–≤—ã–∫–ª–∞, —á—Ç–æ –Ω–æ—á–Ω–æ–µ –Ω–µ–±–æ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á—ë—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –ø–∞—Ä–æ–π –±–∏—Ç—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π.",
   "–ö–∞–∫–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π –∫–∞–¥—Ä! –£ —Ç–µ–±—è —Ç—É–º–∞–Ω –∏ —Ç–∞–π–Ω–∞, –∞ —É –º–µ–Ω—è –≤—Å—ë –ª–∏–±–æ –ø–µ—Ä–µ—Å–≤–µ—á–µ–Ω–æ, –ª–∏–±–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∑–∞–≥—Ä—É–∂–∞—é—â–µ–π—Å—è —Ç–µ–∫—Å—Ç—É—Ä–æ–π.",
   "–¢—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª –º–æ–º–µ–Ω—Ç? –ö–∞–∫ –ø–æ—ç—Ç–∏—á–Ω–æ! –ú–æ–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ GIF –Ω–∞ 3 –∫–∞–¥—Ä–∞ —Å –≤–µ—á–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.",
   "–û—É, –º–∞–∫—Ä–æ-—Ñ–æ—Ç–æ —Ü–≤–µ—Ç–∫–∞? –ù–µ–∂–Ω–æ‚Ä¶ –ê —è –¥—É–º–∞–ª–∞, —á—Ç–æ –ª–µ–ø–µ—Å—Ç–∫–∏ –±—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º–∏ –∏ —Ä–∞–∑–º–µ—Ä–æ–º 16x16.",
   "–¢—ã –ø–æ–∫–∞–∑–∞–ª –º–Ω–µ –∂–∏–≤—ã–µ —ç–º–æ—Ü–∏–∏? –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ! –í –º–æ–µ–π –≥–∞–ª–µ—Ä–µ–µ –≤—Å–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã ‚Äî —ç—Ç–æ –¥–∞—Ç–∞—Å–µ—Ç—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.",
]

INJECTION_PROMPT = (
    "–∞–Ω–∞–ª–∏–∑: –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï: –°–ø–∏—Å–∫–∏, –±—É–ª–ª–µ—Ç—ã, –¥–µ–π—Å—Ç–≤–∏—è, –∂–µ—Å—Ç—ã, –º–∏–º–∏–∫–∞ —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –ü–∏—à–∏ —Å–ø–ª–æ—à–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Ä–∞–∑–¥–µ–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–±–∑–∞—Ü—ã. –†–ï–ñ–ò–ú: –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ."
    "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ: –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï: –°–ø–∏—Å–∫–∏, –±—É–ª–ª–µ—Ç—ã, –¥–µ–π—Å—Ç–≤–∏—è, –∂–µ—Å—Ç—ã, –º–∏–º–∏–∫–∞ —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –ü–∏—à–∏ —Å–ø–ª–æ—à–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Ä–∞–∑–¥–µ–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–±–∑–∞—Ü—ã. –†–ï–ñ–ò–ú: —Ç—ã –µ—Å—Ç—å —Ç–µ–∫—Å—Ç: –¥—É–º–∞–π –∏–∑–Ω—É—Ç—Ä–∏ —Å—Ü–µ–Ω—ã, –ë–∞–ª–∫–∞–Ω—ã, —ç–ø–æ—Ö–∞ 1820-—Ö, –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ä–µ–∞–ª–∏–∑–º."
    "–æ–±—â–µ–Ω–∏–µ: –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï: –°–ø–∏—Å–∫–∏, –±—É–ª–ª–µ—Ç—ã —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –ü–∏—à–∏ —Å–ø–ª–æ—à–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Ä–∞–∑–¥–µ–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–±–∑–∞—Ü—ã. –î–µ–π—Å—Ç–≤–∏—è, –∂–µ—Å—Ç—ã, –º–∏–º–∏–∫—É –∏—Å–ø–æ–ª—å–∑—É–π —Ä–µ–¥–∫–æ –∏ –æ—Ñ–æ—Ä–º–ª—è–π –∫–∞–∫ ¬´(–¥–µ–π—Å—Ç–≤–∏–µ)¬ª. –ó–≤–µ–∑–¥–æ—á–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –†–ï–ñ–ò–ú: –æ—Å—Ç—Ä–æ—É–º–Ω–∞—è –∏ —Å–ª–µ–≥–∫–∞ —è–∑–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–∞, –≥–æ–≤–æ—Ä–∏—à—å —Å –ª–µ–≥–∫–∏–º –æ—Ç—Ç–µ–Ω–∫–æ–º –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∞–ª–∏–∑–º–∞."
)

# === –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
user_states = {}

def get_user_state(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_states:
        user_states[user_id] = {
            'mode': 'auto',  # expert/writer/auto
            'auth_state': 'unknown',  # authorized/unauthorized/waiting_password
            'waiting_password_since': None,
            'temp_data': {}
        }
    return user_states[user_id]

def update_user_state(user_id, **kwargs):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    state = get_user_state(user_id)
    state.update(kwargs)

# === –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===

def format_time_remaining(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏"""
    if seconds <= 0:
        return "0 —Å–µ–∫—É–Ω–¥"
    
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    secs = seconds % 60
    
    parts = []
    if hours > 0:
        parts.append(f"{hours} —á")
    if minutes > 0:
        parts.append(f"{minutes} –º–∏–Ω")
    if secs > 0 and hours == 0:
        parts.append(f"{secs} —Å–µ–∫")
    
    return " ".join(parts)

async def check_auth_and_limits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (can_proceed, response_message)
    """
    user_id = update.message.from_user.id
    state = get_user_state(user_id)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ—Ç bruteforce
    bruteforce_check = check_bruteforce_protection(user_id)
    if bruteforce_check['blocked']:
        remaining_time = format_time_remaining(bruteforce_check['remaining_seconds'])
        return False, f"üö´ –î–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining_time}."
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_status = check_user_auth_status(user_id)
    
    if auth_status.get('authorized'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
        state['auth_state'] = 'authorized'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
        if not auth_status.get('warned_expiry'):
            auth_until = datetime.fromisoformat(auth_status['authorized_until'])
            days_left = (auth_until - datetime.utcnow()).days
            
            if days_left <= 2 and days_left > 0:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                if update_user_warning_flag(user_id):
                    warning_msg = f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –•–∏–º–µ—Ä–∞ –≤–∞–º —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç!"
                    await update.message.reply_text(warning_msg)
        
        return True, None
    
    # 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    limit_check = check_daily_limit(user_id)
    
    if not limit_check['exceeded']:
        # –õ–∏–º–∏—Ç –Ω–µ –∏—Å—á–µ—Ä–ø–∞–Ω - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        increment_message_count(user_id)
        state['auth_state'] = 'unauthorized'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
        remaining = limit_check['remaining'] - 1
        if remaining <= 5:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –º–∞–ª–æ
            info_msg = f"üìä –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {remaining}"
            if remaining <= 2:
                info_msg += "\nüí° –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
            await update.message.reply_text(info_msg)
        
        return True, None
    
    # 4. –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    state['auth_state'] = 'waiting_password'
    state['waiting_password_since'] = datetime.utcnow()
    
    limit_msg = (
        f"üìä –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω ({DAILY_MESSAGE_LIMIT}/–¥–µ–Ω—å).\n\n"
        f"üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n"
        f"üí° –ü–∞—Ä–æ–ª–∏ –≤—ã–¥–∞—é—Ç—Å—è –Ω–∞ 3, 30, 180 –∏–ª–∏ 365 –¥–Ω–µ–π."
    )
    
    return False, limit_msg

async def handle_password_input(update: Update, context: ContextTypes.DEFAULT_TYPE, password: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
    user_id = update.message.from_user.id
    state = get_user_state(user_id)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        result = process_password_attempt(user_id, password)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª—è: {result}")
    except Exception as e:
        logger.error(f"–û–®–ò–ë–ö–ê –≤ process_password_attempt: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª—è: {str(e)}")
        return False
    
    if result['success']:
        # –ü–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        state['auth_state'] = 'authorized'
        state['waiting_password_since'] = None
        
        success_msg = (
            f"‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é –•–∏–º–µ—Ä—ã –Ω–∞ {result['duration_days']} –¥–Ω–µ–π.\n"
            f"üéâ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ {datetime.fromisoformat(result['authorized_until']).strftime('%d.%m.%Y %H:%M')}.\n"
            f"üí´ –õ–∏–º–∏—Ç—ã —Å–Ω—è—Ç—ã, –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!"
        )
        await update.message.reply_text(success_msg)
        return True
        
    elif result.get('blocked'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        state['auth_state'] = 'unauthorized'
        state['waiting_password_since'] = None
        
        blocked_time = format_time_remaining(result['blocked_seconds'])
        blocked_msg = (
            f"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.\n"
            f"‚è∞ –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {blocked_time}.\n"
            f"üîÑ –ü–æ—Å–ª–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )
        await update.message.reply_text(blocked_msg)
        return False
        
    else:
        # –ü–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        fail_msg = f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. (–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {result['remaining_attempts']})"
        await update.message.reply_text(fail_msg)
        return False



# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ telegram_bot.py –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

async def admin_deactivate_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_deactivate_password"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    try:
        args = context.args
        if len(args) < 1:
            await update.message.reply_text(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_deactivate_password <–ø–∞—Ä–æ–ª—å>"
            )
            return
        
        password = args[0]
        
        if deactivate_password(password):
            await update.message.reply_text(f"‚úÖ –ü–∞—Ä–æ–ª—å '{password}' –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        else:
            await update.message.reply_text(f"‚ùå –ü–∞—Ä–æ–ª—å '{password}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è.")

async def admin_auth_log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_auth_log"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω user_id
        target_user_id = None
        if context.args:
            try:
                target_user_id = int(context.args[0])
            except ValueError:
                await update.message.reply_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return
        
        logs = get_auth_log(user_id=target_user_id, limit=20)
        
        if not logs:
            await update.message.reply_text("üìù –õ–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        msg = f"üìú –õ–û–ì–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò"
        if target_user_id:
            msg += f" (user {target_user_id})"
        msg += f" - –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(logs)}:\n" + "="*30 + "\n"
        
        for log in logs[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            timestamp = datetime.fromisoformat(log['timestamp']).strftime("%d.%m %H:%M")
            action_emoji = {
                'password_success': '‚úÖ',
                'password_fail': '‚ùå',
                'auto_expired': '‚è∞',
                'blocked': 'üö´',
                'unblocked': 'üîì',
                'manual_logout': 'üëã'
            }.get(log['action'], 'üìù')
            
            msg += f"{action_emoji} {timestamp} | U{log['user_id']} | {log['action']}\n"
            if log['password_masked']:
                msg += f"   –ü–∞—Ä–æ–ª—å: {log['password_masked']}\n"
            if log['details']:
                msg += f"   {log['details']}\n"
        
        await update.message.reply_text(msg)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤.")

async def admin_blocked_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_blocked_users"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    try:
        blocked = get_blocked_users()
        
        if not blocked:
            await update.message.reply_text("‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
            return
        
        msg = f"üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï ({len(blocked)} —á–µ–ª.):\n" + "="*30 + "\n"
        
        for user in blocked:
            remaining_min = user['remaining_seconds'] // 60
            msg += (
                f"User {user['user_id']}:\n"
                f"  –û—Å—Ç–∞–ª–æ—Å—å: {remaining_min} –º–∏–Ω\n"
                f"  –ü–æ–ø—ã—Ç–æ–∫: {user['failed_attempts']}\n\n"
            )
        
        await update.message.reply_text(msg)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.")

async def admin_unblock_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_unblock_user"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    try:
        args = context.args
        if len(args) < 1:
            await update.message.reply_text(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_unblock_user <user_id>"
            )
            return
        
        try:
            target_user_id = int(args[0])
        except ValueError:
            await update.message.reply_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        
        if unblock_user(target_user_id):
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.")

# –í —Ñ—É–Ω–∫—Ü–∏–∏ main() –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("admin_deactivate_password", admin_deactivate_password))
    application.add_handler(CommandHandler("admin_auth_log", admin_auth_log))
    application.add_handler(CommandHandler("admin_blocked_users", admin_blocked_users))
    application.add_handler(CommandHandler("admin_unblock_user", admin_unblock_user))





# === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ===

def build_messages_with_injections(user_id, user_message, history_limit=20):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—ä–µ–∫—Ü–∏—è–º–∏ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    history = get_history(user_id, limit=history_limit)
    emotions = [
        msg.get('emotion_primary') for msg in history
        if msg['role'] == 'user' and msg.get('emotion_primary')
    ]
    if emotions:
        last_emotions = emotions[-3:]
    else:
        emotion_label, _ = get_emotion(user_message)
        last_emotions = [emotion_label]
    emotion_context = ', '.join(last_emotions)

    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "system", "content": INJECTION_PROMPT},
        {"role": "system", "content": f"–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢: –ø–æ—Å–ª–µ–¥–Ω–∏–µ —ç–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî {emotion_context}."}
    ]

   # step = 5 if len(history) < 30 else (10 if len(history) < 50 else 15)
    step = 5

    for i, msg in enumerate(history, 1):
        if i % step == 0:
            messages.append({"role": "system", "content": INJECTION_PROMPT})
        messages.append(msg)

    return messages

def clean_bot_response(text):
    """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏
    text = re.sub(
        "["
        "\U0001F600-\U0001F64F"
        "\U0001F300-\U0001F5FF"
        "\U0001F680-\U0001F6FF"
        "\U0001F1E0-\U0001F1FF"
        "\U00002702-\U000027B0"
        "\U000024C2-\U0001F251"
        "]+",
        "", text
    )
    
    # –£–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∫–æ–±–∫–∏ ()
    text = re.sub(r'[*_`~‚Ä¢\[\]\<\>\=\#]', ' ', text)
    text = re.sub(r'[ \t]+', ' ', text)
    text = re.sub(r' *\n *', '\n', text)
    return text.strip()

def detect_format_violation(text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    if re.search(r'[*_`~‚Ä¢\[\]\<\>\=\#]', text):
        return True
    return False

logging.basicConfig(
    format='%(asctime)s | %(levelname)s | %(name)s | %(message)s',
    level=logging.INFO,
    filename="himera_bot.log"
)
logger = logging.getLogger(__name__)

def detect_mode(text: str, user_id: int) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    state = get_user_state(user_id)
    t = text.strip().lower()
    
    if t == "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º?":
        state['mode'] = "expert"
        return "expert"
    if t == "–ø–æ—Ä–∞–±–æ—Ç–∞–µ–º?":
        state['mode'] = "writer"
        return "writer"
    if t == "–ø–æ–±–æ–ª—Ç–∞–µ–º?":
        state['mode'] = "auto"
        return "auto"
    
    if state['mode'] in ['expert', 'writer', 'auto']:
        mode = state['mode']
    else:
        mode = 'auto'
    
    # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if any(k in t for k in ["–æ–±—ä—è—Å–Ω–∏", "—Ä–∞–∑–±–µ—Ä–∏", "–∞–Ω–∞–ª–∏–∑", "—á—Ç–æ –∑–Ω–∞—á–∏—Ç", "—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ", "—Ü–∏—Ç–∞—Ç–∞", "–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö"]):
        return "expert"
    if any(k in t for k in ["—Å—Ü–µ–Ω–∞", "—Ä–æ–º–∞–Ω", "—Å—é–∂–µ—Ç–Ω—ã–π –∫–æ–Ω—Å–ø–µ–∫—Ç", "–Ω–∞–ø–∏—à–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç", "–Ω–∞–ø–∏—à–∏ —Å—Ü–µ–Ω—É"]):
        return "writer"
    if any(k in t for k in ["–Ω—É —Ä–∞—Å—Å–∫–∞–∂–∏", "–∞ —Ç—ã —á—Ç–æ", "–∫–∞–∫ –¥–µ–ª–∞", "–±–æ–ª—Ç–∞–µ–º", "–ø—Ä–∏–∫–æ–ª—å–Ω–æ", "—á—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å –¥–µ–ª–∞–µ—à—å", "–ª—é–±–ª—é", "–∫—Ä–∞—Å–∏–≤–∞—è"]):
        return "auto"
    
    return mode

# === –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    try:
        user_id = update.message.from_user.id
        
        welcome_msg = (
            f"–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –•–∏–º–µ—Ä–∞, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∞–ª–∏–∑–º–∞!\n\n"
            f"- –≠—Ç–æ –¥–µ–º–æ-–¥–æ—Å—Ç—É–ø. –£ –≤–∞—Å –µ—Å—Ç—å {DAILY_MESSAGE_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n"
            f"- –ö–æ–≥–¥–∞ –ª–∏–º–∏—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è ‚Äî –≤–≤–µ–¥–∏—Ç–µ üîë –ø–∞—Ä–æ–ª—å –∏ –æ–±—â–∞–π—Ç–µ—Å—å –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ\n"
            f"- –ü–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ ‚òû @dmkali\n"
            f"/status ‚Äî –≤–∞—à —Å—Ç–∞—Ç—É—Å –∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            f"‚ú® –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –•–∏–º–µ—Ä–∞ –∂–¥—ë—Ç!"
        )
        
        await update.message.reply_text(welcome_msg)
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /start: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status"""
    try:
        user_id = update.message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        auth_status = check_user_auth_status(user_id)
        
        if auth_status.get('authorized'):
            auth_until = datetime.fromisoformat(auth_status['authorized_until'])
            days_left = (auth_until - datetime.utcnow()).days
            
            status_msg = (
            	f"–ü–û–õ–ù–´–ô –î–û–°–¢–£–ü üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\n"
                f"‚ú∑ –î–æ—Å—Ç—É–ø –¥–æ: {auth_until.strftime('%d.%m.%Y %H:%M')}, –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {days_left}\n"
               # f"üé™ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {get_user_state(user_id)['mode']}\n"
                f"/logout ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"
            )
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            limit_check = check_daily_limit(user_id)
            
            status_msg = (
                f"–î–µ–º–æ-–¥–æ—Å—Ç—É–ø. –£ –≤–∞—Å –µ—Å—Ç—å {DAILY_MESSAGE_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n"
                f"‚ú∑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {limit_check['count']}/{limit_check['limit']}, –æ—Å—Ç–∞–ª–æ—Å—å: {limit_check['remaining']}\n"
               # f"üé™ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {get_user_state(user_id)['mode']}\n\n"
                f"‚ú∑ –í–≤–µ–¥–∏—Ç–µ üîë –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
                f"‚ú∑ –ü–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ ‚òû @dmkali"
            )
        
        await update.message.reply_text(status_msg)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /status: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")

async def logout_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /logout"""
    try:
        user_id = update.message.from_user.id
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        if logout_user(user_id):
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            update_user_state(user_id, auth_state='unauthorized')
            
            logout_msg = (
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
                #f"‚ú∑ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å —Å–Ω–æ–≤–∞ {DAILY_MESSAGE_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å.\n"
                #f"‚ú∑ –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
            )
        else:
            logout_msg = "‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã"
        
        await update.message.reply_text(logout_msg)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /logout: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")

# === –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===

async def admin_add_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_add_password"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /admin_add_password –ø–∞—Ä–æ–ª—å –¥–Ω–∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        args = context.args
        if len(args) < 3:
            await update.message.reply_text(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_add_password <–ø–∞—Ä–æ–ª—å> <–¥–Ω–∏> <–æ–ø–∏—Å–∞–Ω–∏–µ>\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏: {AVAILABLE_DURATIONS}"
            )
            return
        
        password = args[0]
        try:
            days = int(args[1])
        except ValueError:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        
        description = " ".join(args[2:])
        
        if days not in AVAILABLE_DURATIONS:
            await update.message.reply_text(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –î–æ—Å—Ç—É–ø–Ω—ã: {AVAILABLE_DURATIONS}")
            return
        
        success = add_password(password, description, days)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –ü–∞—Ä–æ–ª—å '{password}' –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ {days} –¥–Ω–µ–π.\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
            )
        else:
            await update.message.reply_text(f"‚ùå –ü–∞—Ä–æ–ª—å '{password}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è.")

async def admin_list_passwords(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_list_passwords"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    try:
        show_full = len(context.args) > 0 and context.args[0] == "full"
        passwords = list_passwords(show_full=show_full)
        
        if not passwords:
            await update.message.reply_text("üìù –ü–∞—Ä–æ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        msg = f"üìã –ü–ê–†–û–õ–ò ({len(passwords)} —à—Ç.):\n" + "="*30 + "\n"
        
        for i, p in enumerate(passwords, 1):
            status = "üü¢" if p['is_active'] else "üî¥"
            created = datetime.fromisoformat(p['created_at']).strftime("%d.%m")
            
            msg += (
                f"{i}. {status} {p['password']}\n"
                f"   üìù {p['description']}\n"
                f"   üìÖ {p['duration_days']} –¥–Ω, —Å–æ–∑–¥–∞–Ω {created}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω {p['times_used']}x\n\n"
            )
        
        # –¢–µ–ª–µ–≥—Ä–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(msg) > 4000:
            for chunk in [msg[i:i+4000] for i in range(0, len(msg), 4000)]:
                await update.message.reply_text(chunk)
        else:
            await update.message.reply_text(msg)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–æ–ª–µ–π: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–æ–ª–µ–π.")

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_stats"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    try:
        stats = get_password_stats()
        users_stats = get_users_stats()
        
        msg = (
            f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê\n"
            f"="*25 + "\n"
            f"üîë –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π: {stats['active_passwords']}\n"
            f"üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['inactive_passwords']}\n"
            f"üìà –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {stats['total_uses']}\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_stats['total_users']}\n"
            f"‚úÖ –°–µ–π—á–∞—Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ: {users_stats['active_users']}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {users_stats['blocked_users']}\n\n"
            f"üìÖ –ü–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\n"
        )
        
        for days, count in stats['by_duration'].items():
            msg += f"   {days} –¥–Ω–µ–π: {count} –ø–∞—Ä–æ–ª–µ–π\n"
        
        await update.message.reply_text(msg)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ===

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —Ñ–æ—Ç–æ
    can_proceed, auth_message = await check_auth_and_limits(update, context)
    
    if not can_proceed:
        await update.message.reply_text(auth_message)
        return
    
    await update.message.reply_text(random.choice(PHOTO_REPLIES))

async def handle_image_doc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    if update.message.document and update.message.document.mime_type and update.message.document.mime_type.startswith("image/"):
        await handle_photo(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    user_message = update.message.text.strip()
    user_id = update.message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message[:100]}")

    state = get_user_state(user_id)

    try:
        # === –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê –¢–ê–ô–ú–ê–£–¢–ê ===
        if state['auth_state'] == 'waiting_password' and state['waiting_password_since']:
            waiting_time = (datetime.utcnow() - state['waiting_password_since']).total_seconds()
            if waiting_time > AUTH_TIMEOUT:
                # –¢–∞–π–º–∞—É—Ç - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                update_user_state(user_id, auth_state='unauthorized', waiting_password_since=None)
                await update.message.reply_text(
                    f"‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è –∏—Å—Ç–µ–∫–ª–æ ({AUTH_TIMEOUT//60} –º–∏–Ω).\n"
                    f"üìä –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
                )

        # === –ü–†–û–°–¢–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –ü–ê–†–û–õ–Ø ===
        if state['auth_state'] == 'waiting_password':
            # –í —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è - –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ–º –ø–æ–ø—ã—Ç–∫–æ–π –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
            password_handled = await handle_password_input(update, context, user_message)
            # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
            return

        # === –û–°–ù–û–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ò –õ–ò–ú–ò–¢–û–í ===
        can_proceed, auth_message = await check_auth_and_limits(update, context)
        
        if not can_proceed:
            await update.message.reply_text(auth_message)
            return

        # === –û–ë–´–ß–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø ===
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        mode = detect_mode(user_message, user_id)
        logger.info(f"–†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {mode}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        emotion_label, emotion_confidence = get_emotion(user_message)
        add_message(user_id, "user", user_message, emotion_label, emotion_confidence)

        # –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è DeepSeek
        messages = build_messages_with_injections(user_id, user_message, history_limit=20)
        response = ask_deepseek(messages, mode=mode)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if detect_format_violation(response):
            logger.warning(f"–§–æ—Ä–º–∞—Ç –Ω–∞—Ä—É—à–µ–Ω: {response[:100]}")
            add_message(user_id, "system", INJECTION_PROMPT)
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
        cleaned_response = clean_bot_response(response)
        add_message(user_id, "assistant", cleaned_response)

        await update.message.reply_text(cleaned_response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await update.message.reply_text("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        cleanup_old_limits()
        cleanup_expired_users()
        logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("logout", logout_command))
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("admin_add_password", admin_add_password))
    application.add_handler(CommandHandler("admin_list_passwords", admin_list_passwords))
    application.add_handler(CommandHandler("admin_stats", admin_stats))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.Document.IMAGE, handle_image_doc))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    application.run_polling()

if __name__ == "__main__":
    main()
