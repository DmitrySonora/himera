#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è–º–∏ –±–æ—Ç–∞ –•–∏–º–µ—Ä–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 manage_passwords.py --add "–ø–∞—Ä–æ–ª—å" --days 30 --desc "–û–ø–∏—Å–∞–Ω–∏–µ"
    python3 manage_passwords.py --list
    python3 manage_passwords.py --list --full
    python3 manage_passwords.py --deactivate "–ø–∞—Ä–æ–ª—å"
    python3 manage_passwords.py --stats
    python3 manage_passwords.py --cleanup
    python3 manage_passwords.py --logs [--user USER_ID]
    python3 manage_passwords.py --blocked
    python3 manage_passwords.py --unblock USER_ID
"""

import argparse
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from history_db import *
    from config import AVAILABLE_DURATIONS
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)

def add_password_cmd(password: str, days: int, description: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
    try:
        if days not in AVAILABLE_DURATIONS:
            print(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {days}")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {AVAILABLE_DURATIONS}")
            return False
        
        success = add_password(password, description, days)
        if success:
            print(f"‚úÖ –ü–∞—Ä–æ–ª—å '{password}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ {days} –¥–Ω–µ–π")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
            return True
        else:
            print(f"‚ùå –ü–∞—Ä–æ–ª—å '{password}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {e}")
        return False

def list_passwords_cmd(show_full: bool = False):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–æ–ª–µ–π"""
    try:
        passwords = list_passwords(show_full=show_full)
        
        if not passwords:
            print("üìù –ü–∞—Ä–æ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"üìã –°–ü–ò–°–û–ö –ü–ê–†–û–õ–ï–ô ({len(passwords)} —à—Ç.):")
        print("-" * 80)
        
        for i, p in enumerate(passwords, 1):
            status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if p['is_active'] else "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            created = datetime.fromisoformat(p['created_at']).strftime("%Y-%m-%d %H:%M")
            
            print(f"{i:2}. {p['password']}")
            print(f"    –û–ø–∏—Å–∞–Ω–∏–µ: {p['description']}")
            print(f"    –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {p['duration_days']} –¥–Ω–µ–π")
            print(f"    –°—Ç–∞—Ç—É—Å: {status}")
            print(f"    –°–æ–∑–¥–∞–Ω: {created}")
            print(f"    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {p['times_used']}")
            print()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

def deactivate_password_cmd(password: str):
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è"""
    try:
        success = deactivate_password(password)
        if success:
            print(f"‚úÖ –ü–∞—Ä–æ–ª—å '{password}' —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            return True
        else:
            print(f"‚ùå –ü–∞—Ä–æ–ª—å '{password}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
        return False

def show_stats_cmd():
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        stats = get_password_stats()
        
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–û–õ–ï–ô:")
        print("-" * 40)
        print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π: {stats['active_passwords']}")
        print(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['inactive_passwords']}")
        print(f"–í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {stats['total_uses']}")
        
        if stats['by_duration']:
            print("\n–ü–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
            for days, count in stats['by_duration'].items():
                print(f"  {days} –¥–Ω–µ–π: {count} –ø–∞—Ä–æ–ª–µ–π")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        
        c.execute('SELECT COUNT(*) FROM users WHERE is_authorized = TRUE')
        active_users = c.fetchone()[0]
        
        c.execute('SELECT COUNT(DISTINCT user_id) FROM users')
        total_users = c.fetchone()[0]
        
        c.execute('SELECT COUNT(*) FROM users WHERE blocked_until > datetime("now")')
        blocked_users = c.fetchone()[0]
        
        conn.close()
        
        print(f"\nüë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:")
        print("-" * 40)
        print(f"–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_users}")
        print(f"–°–µ–π—á–∞—Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ: {active_users}")
        print(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked_users}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def cleanup_cmd():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üßπ –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –î–ê–ù–ù–´–•:")
        print("-" * 40)
        
        deleted_limits = cleanup_old_limits()
        print(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ª–∏–º–∏—Ç–æ–≤: {deleted_limits}")
        
        expired_users = cleanup_expired_users()
        print(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {expired_users}")
        
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

def show_logs_cmd(user_id: int = None, limit: int = 20):
    """–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        logs = get_auth_log(user_id=user_id, limit=limit)
        
        if not logs:
            print("üìù –õ–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        header = f"üìú –õ–û–ì–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò"
        if user_id:
            header += f" (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})"
        header += f" - –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(logs)} –∑–∞–ø–∏—Å–µ–π:"
        
        print(header)
        print("-" * 80)
        
        for log in logs:
            timestamp = datetime.fromisoformat(log['timestamp']).strftime("%Y-%m-%d %H:%M:%S")
            action_emoji = {
                'password_success': '‚úÖ',
                'password_fail': '‚ùå',
                'auto_expired': '‚è∞',
                'blocked': 'üö´',
                'unblocked': 'üîì',
                'password_deactivated': 'üóëÔ∏è'
            }.get(log['action'], 'üìù')
            
            print(f"{action_emoji} {timestamp} | User {log['user_id']} | {log['action']}")
            if log['password_masked']:
                print(f"    –ü–∞—Ä–æ–ª—å: {log['password_masked']}")
            if log['details']:
                print(f"    –î–µ—Ç–∞–ª–∏: {log['details']}")
            print()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")

def show_blocked_cmd():
    """–ü–æ–∫–∞–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        blocked = get_blocked_users()
        
        if not blocked:
            print("‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç")
            return
        
        print(f"üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ({len(blocked)} —à—Ç.):")
        print("-" * 60)
        
        for user in blocked:
            blocked_until = datetime.fromisoformat(user['blocked_until']).strftime("%Y-%m-%d %H:%M:%S")
            remaining_min = user['remaining_seconds'] // 60
            
            print(f"User {user['user_id']}:")
            print(f"  –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ: {blocked_until}")
            print(f"  –û—Å—Ç–∞–ª–æ—Å—å –º–∏–Ω—É—Ç: {remaining_min}")
            print(f"  –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {user['failed_attempts']}")
            print()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

def unblock_user_cmd(user_id: int):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        success = unblock_user(user_id)
        if success:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            return True
        else:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è–º–∏ –±–æ—Ç–∞ –•–∏–º–µ—Ä–∞",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å:
    python3 manage_passwords.py --add "test123" --days 3 --desc "–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
    python3 manage_passwords.py --add "–º–µ—Å—è—á–Ω—ã–π" --days 30 --desc "–î–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Ü"

  –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞—Ä–æ–ª–µ–π:
    python3 manage_passwords.py --list
    python3 manage_passwords.py --list --full    (–ø–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é)

  –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è:
    python3 manage_passwords.py --deactivate "test123"

  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ª–æ–≥–∏:
    python3 manage_passwords.py --stats
    python3 manage_passwords.py --logs
    python3 manage_passwords.py --logs --user 123456789

  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏:
    python3 manage_passwords.py --blocked
    python3 manage_passwords.py --unblock 123456789

  –û—á–∏—Å—Ç–∫–∞:
    python3 manage_passwords.py --cleanup
        """)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    parser.add_argument('--add', type=str, help='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å')
    parser.add_argument('--days', type=int, help='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö (3, 30, 180, 365)')
    parser.add_argument('--desc', type=str, help='–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è')
    
    parser.add_argument('--list', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π')
    parser.add_argument('--full', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é (—Ç–æ–ª—å–∫–æ —Å --list)')
    
    parser.add_argument('--deactivate', type=str, help='–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å')
    parser.add_argument('--stats', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    parser.add_argument('--cleanup', action='store_true', help='–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ')
    
    parser.add_argument('--logs', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    parser.add_argument('--user', type=int, help='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤')
    
    parser.add_argument('--blocked', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    parser.add_argument('--unblock', type=int, help='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(sys.argv) == 1:
        parser.print_help()
        return 0
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    try:
        if args.add:
            if not args.days or not args.desc:
                print("‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –Ω—É–∂–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã --days –∏ --desc")
                return 1
            return 0 if add_password_cmd(args.add, args.days, args.desc) else 1
        
        elif args.list:
            list_passwords_cmd(show_full=args.full)
            return 0
        
        elif args.deactivate:
            return 0 if deactivate_password_cmd(args.deactivate) else 1
        
        elif args.stats:
            show_stats_cmd()
            return 0
        
        elif args.cleanup:
            cleanup_cmd()
            return 0
        
        elif args.logs:
            show_logs_cmd(user_id=args.user)
            return 0
        
        elif args.blocked:
            show_blocked_cmd()
            return 0
        
        elif args.unblock:
            return 0 if unblock_user_cmd(args.unblock) else 1
        
        else:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
            return 1
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())